# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agent.proto import node_pb2 as node__pb2


class NodeServiceStub(object):
    """///////////////////////////////////////////////////////////
    接口定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/NodeService/ping',
                request_serializer=node__pb2.PingRequest.SerializeToString,
                response_deserializer=node__pb2.PingReply.FromString,
                )
        self.node_add = channel.unary_unary(
                '/NodeService/node_add',
                request_serializer=node__pb2.AddNodeRequest.SerializeToString,
                response_deserializer=node__pb2.AddNodeReply.FromString,
                )


class NodeServiceServicer(object):
    """///////////////////////////////////////////////////////////
    接口定义
    """

    def ping(self, request, context):
        """检测主机是否正常在线
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def node_add(self, request, context):
        """添加节点到管理平台中
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=node__pb2.PingRequest.FromString,
                    response_serializer=node__pb2.PingReply.SerializeToString,
            ),
            'node_add': grpc.unary_unary_rpc_method_handler(
                    servicer.node_add,
                    request_deserializer=node__pb2.AddNodeRequest.FromString,
                    response_serializer=node__pb2.AddNodeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """///////////////////////////////////////////////////////////
    接口定义
    """

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NodeService/ping',
            node__pb2.PingRequest.SerializeToString,
            node__pb2.PingReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def node_add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NodeService/node_add',
            node__pb2.AddNodeRequest.SerializeToString,
            node__pb2.AddNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
